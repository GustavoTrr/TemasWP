
Este tema foi criado como ESTUDO
com base na série de posts https://www.wptotal.com/como-criar-um-wordpress-theme/

Aula 1
https://www.wptotal.com/como-criar-um-template-wordpress-parte-1/

1ª Dica: O WordPress é um gestor de conteúdo que no inicio pode fazer alguma confusão as muitas pastas e ficheiros que tem, mas você só tem que se preocupar com 2 coisas: o ficheiro wp-config.php e a pasta wp-content.

O ficheiro wp-config.php contém toda a informação necessária para o WordPress se ligar a base de dados (banco de dados) e funcionar normalmente. Já a pasta wp-content é onde ficam os temas e os plugins.

As partes/ficheiros básicos e essenciais de um tema são os seguintes:

* header.php: local onde fica o código do cabeçalho <head>, e início do corpo <body>
* sidebar.php: local onde fica o código da lateral
* footer.php: local onde fica o código do rodapé
* index.php: código que mostra os artigos na página inicial
* single.php: código que mostra o artigo na sua própria página
* page.php: código que mostra o conteúdo de uma página estática
* archive.php: igual ao index.php, o código nesta parte vai mostrar os artigos que estão no arquivo, nas categorias, tags, etc
* functions.php: local onde ficam algumas funções que adicionam mais capacidades aos temas
* 404.php: igual ao index.php, em vez de mostrar um artigo deverá de mostrar um texto a avisar que o conteúdo não foi encontrado
* style.css: ficheiro onde fica o stylesheet do tema

2ª - Criamos uma página única com o modelo HTML que usaremos.
3ª - separaremos as partes deste conteúdo HTML referencial em arquivos separados.
4ª - Aprendemos que sem o arquivo css, o WP não considera um tema pronto para uso.

 - Funções utilizadas:
	- get_header();
	- get_sidebar();
	- get_footer();
	
Aula 2
https://www.wptotal.com/como-criar-um-wordpress-theme-parte-2/

 - Acrescentamos no <head> o seguinte código:

			<link rel="profile" href="http://gmpg.org/xfn/11" />
			<meta http-equiv="Content-Type" content="<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>" />
			<title><?php wp_title(''); ?></title>
			<link rel="stylesheet" type="text/css" media="all" href="<?php bloginfo( 'stylesheet_url' ); ?>" />
			<link rel="pingback" href="<?php bloginfo( 'pingback_url' ); ?>" />
			<?php if ( is_singular() && get_option( 'thread_comments' ) ) wp_enqueue_script( 'comment-reply' ); wp_head(); ?>

			linha 1: indica ao browser como o  mark-up deve de ser usado;
			linha 2: indica o tipo de conteúdo e o conjunto de caracteres que está a ser usado;
			linha 3: a tag wp_title vai gerar um título diferente para cada página. Esta tag pode ser mais trabalhada, mas falamos nisso noutro artigo;
			linha 4: insere automaticamente o stylesheet criado anteriormente (style.css). O wordpress deteta a sua localização e insere o url do ficheiro;
			linha 5: gera o url de pingback, não é obrigatório mas convém usar;
			linha 6: ativa o suporte a comentários com vários níveis e também tem a tag wp_head que serve para inserir outras linhas de código nesta zona do tema (é uma tag muito usada pelos plugins)
			
 - Mais em baixo temos o menu e mais uma vez é uma escolha sua. Pode criar o menu manualmente usado html, usar alguma tag do wordpress para listar as categorias (o mais usado) ou usar os menus personalizados do wordpress que permitem adicionar ou remover links do menu através do painel de administração.
	- Nós optamos por mostrar as categorias, por isso vamos usar o seguinte código:
	- <?php wp_list_cats('sort_column=name'); ?>
	- Se você preferir mostrar as páginas em vez das categorias, use a seguinte tag:
	- <?php wp_list_pages('title_li='); ?>
	
 - Funções utilzadas:
	- bloginfo('html_type');
	- bloginfo('charset');
	- wp_title('');
	- bloginfo( 'stylesheet_url' );
	- bloginfo( 'pingback_url' );
	- if ( is_singular() && get_option( 'thread_comments' ) ) wp_enqueue_script( 'comment-reply' ); 
	- wp_head();
	- bloginfo('name');
	- bloginfo('description');
	- wp_list_cats('sort_column=name');
	
Aula 3
https://www.wptotal.com/como-criar-um-wordpress-theme-parte-3/

 - O index.php é o ficheiro onde fica todo o conteúdo mostrado na homepage. Este ficheiro é usado também quando algum ficheiro responsável pela parte do conteúdo está em falta (single.php, archive.php, etc).
 - Criamos o famoso "loop" do wp:
		 <?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>
		 
		<?php endwhile?>
		 
		<?php else: ?>
			 
		<?php endif; ?>
		
		* Para quem não sabe, o "loop" é responsável pela mostragem do conteúdo na página inicial e páginas de arquivo do blog e também mostrar mensagens ao usuário no caso de não existir artigos para ser mostrados ou mostrar os links de navegação pelo arquivo.
	
 - Para a navegação entre posts, o autor sugere utilizar:
	- <?php if(function_exists('wp_pagenavi')) { wp_pagenavi(); } ?>
		*ou
	- <div class="navegacao">
			<div class="recentes"><?php next_posts_link('&laquo; Artigos Anteriores') ?></div>
			<div class="anteriores"><?php previous_posts_link('Artigos Recentes &raquo;') ?></div>
		</div>
		
	Archive.php:

Depois de termos o index.php pronto, vamos criar a página que é responsável por mostrar os arquivos do blog. Existem várias páginas que podem fazer isto, até o index.php faz esse trabalho caso não exista nenhum ficheiro de arquivo, mas vamos usar um ficheiro que é o default para todas as páginas de arquivo (categorias, tags, links, data, autores, etc): o archive.php

 - Funções Utilizadas:
	- the_permalink();
	- the_title();
	- the_author();
	- the_time('d/M/Y');
	- comments_popup_link('Sem Comentários', '1 Comentário', '% Comentários', 'comments-link', '');
	- edit_post_link('(Editar)');
	- is_category();
	- single_cat_title();
	- is_day();
	- the_time('j de F de Y');
	- is_month();
	- is_year();
	- is_author();

	
Aula 4
https://www.wptotal.com/como-criar-um-wordpress-theme-parte-4/

 - Aqui criaremos e configuraremos os arquivos single.php, page.php e 404.php
 
  - O ficheiro single.php é usado para gerar o conteúdo da página de cada post. Assim como o index.php e archive.php criados da terceira parte desta série de artigos, o single.php também tem um loop e o seu trabalho é mostrar o post, os comentários e uma mensagem de erro caso a página não seja encontrada (neste caso o wordpress usa normalmente o 404.php).
	- Na single não precisamos de paginação
	- Na single é interessante ter a parte de comentários
	- Além da tag dos comentários e da alteração no loop, fizemos uma alteração que é importante em termos de SEO: no título usamos uma tag <h1> em vez da <h2>. Esta alteração é importante porque devemos dizer aos motores de busca que aquele é o principal assunto/título da página.
 
 - page.php

	- Para o conteúdo que não deve de fazer parte do blog (página de contacto, sobre nós, etc), há as páginas estáticas. Estas páginas são mostradas com base no ficheiro page.php e as diferenças entre este ficheiro e o single.php são poucas, normalmente removemos o seguinte:
	- informações sobre a página (data em que foi publicada, autor, categoria, etc);
	- comentários;
	- widgets de partilha e outras coisas que não sejam necessárias nestas páginas.
 
  - A página 404.php é utilizada para que se possa estilizar a página de "Página não encontrada" do erro HTTP 404.
	- Primeiro comece por informar o usuário que o que ele procura não foi encontrado e que lamenta por isso. Depois coloque ferramentas para que ele possa navegar por outras páginas do blog, alguns exemplos:
		* formulário de pesquisa (busca) para que ele tente encontrar o que procura
		* uma listagem das categorias ou arquivo por data
		* link para a sua página de contacto para que ele possa falar consigo
 
 - Funções Utilizadas:
	- comments_template();